# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Category {
  category_id: Int!
  # title: String!
  # title_fr: String!
  # description: String
  # description_fr: String
  picture_location: String
}

type CategoryFull {
  category_id: Int!
  language: Language
  title: String!
  description: String
  picture_location: String
}

type Topic {
  topic_id: Int!
}

type TopicFull {
  topic_id: Int!
  language: Language!
  name: String!
}

type CategoryTopic {
  categoryTopic_id: Int!
  # category_acronym: String!
  # topic_acronym: String!
  category_id: Int!
  topic_id: Int!
}

type UserCategoryTopic {
  user_id: Int!
  category_id: Int!
  topic_id: Int!
  email_notice: Boolean!
  sms_notice: Boolean!
}

type CategorySubscription {
  category_id: Int!
  language: Language!
  title: String!
  description: String
  email_notice: Boolean!
  sms_notice: Boolean!
  picture_location: String
}

type User {
  user_id: Int!
  email_address: String!
  phone_address: String
  postal_code: String
  province: Province!
  language: String
  email_notice: Boolean!
  sms_notice: Boolean!
}

type Mutation {
  createUser(
    email_address: String!
    phone_address: String
    postal_code: String
    province: Province!
    language: Language!
    email_notice: Boolean!
    sms_notice: Boolean!
  ): User
  updateUser(
    user_id: Int!
    email_address: String
    phone_address: String
    postal_code: String
    province: Province
    language: Language
    email_notice: Boolean!
    sms_notice: Boolean!
  ): User
  deleteUser(user_id: Int!): String

  createCategory(
    picture_location: String
    english_title: String!
    english_description: String
  ): Category
  addCategoryDisplayLanguage(
    category_id: Int!
    language: Language!
    title: String!
    description: String
  ): CategoryFull
  updateCategory(
    category_id: Int!
    language: String!
    title: String
    description: String
    picture_location: String
  ): Category
  # TODO: delete or archive?
  deleteCategory(category_id: Int!): String

  createTopic(english_name: String!): TopicFull
  addTopicDisplayLanguage(
    topic_id: Int!
    language: Language!
    name: String!
  ): TopicFull
  updateTopic(topic_id: Int!, language: Language!, name: String!): TopicFull
  deleteTopic(topic_id: Int!): String
  addTopicToCategory(category_id: Int!, topic_id: Int!): CategoryTopic
  deleteCategoryTopic(category_id: Int!, topic_id: Int!): String
  userFollowCategoryTopic(
    user_id: Int!
    category_id: Int!
    topic_id: Int!
    email_notice: Boolean!
    sms_notice: Boolean!
  ): UserCategoryTopic
  userUpdateChannelPrefrence(
    user_id: Int!
    category_id: Int!
    topic_id: Int!
    email_notice: Boolean!
    sms_notice: Boolean!
  ): UserCategoryTopic
  userUnfollowCategoryTopic(
    user_id: Int!
    category_id: Int!
    topic_id: Int!
  ): String
  userUnfollowCategory(user_id: Int!, category_id: Int!): String
}

type Query {
  getUserById(user_id: Int!): User
  getUserByEmail(user_email: String!): User

  getUserCategoryTopicByUserId(user_id: Int!): [UserCategoryTopic]
  getCategoriesByUserId(
    user_id: Int!
    language: Language!
  ): [CategorySubscription]
  getCategoryTopicById(categoryTopic_id: Int!): CategoryTopic
  getCategory(category_id: Int!, language: Language!): CategoryFull
  getTopicsOfCategory(category_id: Int!, language: Language!): [TopicFull]
  getTopic(topic_id: Int!, language: Language!): TopicFull

  getAllCategoriesForLanguage(language: Language!): [CategoryFull]
  getAllTopicsForLanguage(language: Language!): [TopicFull]
  getAllCategoryTopics: [CategoryTopic]
  testSQL: String
}

schema {
  query: Query
  mutation: Mutation
}

enum Province {
  AB
  BC
  MB
  NB
  NL
  NT
  NS
  NU
  ON
  PE
  QC
  SK
  YT
}

enum Language {
  en
  fr
}
