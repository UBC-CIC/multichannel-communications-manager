# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Category {
  category_id: Int!
  acronym: String!
  title: String!
  title_fr: String!
  description: String
  description_fr: String
  picture_location: String
}

type Topic {
  topic_id: Int!
  acronym: String!
  acronym_fr: String!
}

type CategoryTopic {
  categoryTopic_id: Int!
  category_acronym: String!
  topic_acronym: String!
}

type UserCategoryTopic {
  user_id: Int!
  categoryTopic_id: Int!
  email_notice: Boolean!
  sms_notice: Boolean
}

type UserCategoryTopicFull {
  user_id: Int!
  category_acronym: String!
  topic_acronym: String!
  email_notice: Boolean!
  sms_notice: Boolean!
}

type CategorySubscription {
  acronym: String
  title: String
  description: String
  email_notice: Boolean
  sms_notice: Boolean
  picture_location: String
}

type User {
  user_id: Int!
  email_address: String!
  phone_address: String
  # phone_id: Int
  postal_code: String
  province: Province!
  email_notice: Boolean!
  sms_notice: Boolean!
}

type Mutation {
  createUser(
    email_address: String!
    phone_address: String
    postal_code: String
    province: Province!
    email_notice: Boolean!
    sms_notice: Boolean!
  ): User
  updateUser(
    user_id: Int!
    email_address: String
    phone_address: String
    postal_code: String
    province: Province
    email_notice: Boolean!
    sms_notice: Boolean!
  ): User
  deleteUser(user_id: Int!): String

  createCategory(
    acronym: String!
    title: String!
    title_fr: String!
    description: String
    description_fr: String
    picture_location: String
  ): Category
  updateCategory(
    category_id: Int!
    acronym: String
    title: String
    title_fr: String
    description: String
    description_fr: String
    picture_location: String
  ): Category
  # TODO: delete or archive?
  deleteCategory(category_id: Int!): String

  createTopic(acronym: String!, acronym_fr: String!): Topic
  # updateTopic(topic_id: Int!, acronym: String): Topic
  deleteTopic(topic_id: Int!): String
  addTopicToCategory(
    category_acronym: String!
    topic_acronym: String!
  ): CategoryTopic
  deleteCategoryTopic(category_acronym: String!, topic_acronym: String!): String
  userFollowCategoryTopic(
    user_id: Int!
    category_acronym: String!
    topic_acronym: String!
    email_notice: Boolean!
    sms_notice: Boolean!
  ): UserCategoryTopic
  userUpdateChannelPrefrence(
    user_id: Int!
    category_acronym: String!
    topic_acronym: String!
    email_notice: Boolean!
    sms_notice: Boolean!
  ): UserCategoryTopic
  userUnfollowCategoryTopic(
    user_id: Int!
    category_acronym: String!
    topic_acronym: String!
  ): User
  userUnfollowCategory(user_id: Int!, category_acronym: String!): String
}

type Query {
  getUserById(user_id: Int!): User
  getUserByEmail(user_email: String!): User
  getUserCategoryTopicByUserId(user_id: Int!): [UserCategoryTopicFull]
  getCategoriesByUserId(user_id: Int!): [CategorySubscription]
  getCategoryTopicById(categoryTopic_id: Int!): CategoryTopic
  getCategoryByAcronym(acronym: String!): Category
  getTopicsOfCategoryByAcronym(category_acronym: String!): [Topic]
  getTopicByAcronym(topic_acronym: String!): Topic
  getAllCategories: [Category]
  getAllTopics: [Topic]
  getAllCategoryTopics: [CategoryTopic]
  testSQL: String
  placeHolder: String
}

schema {
  query: Query
  mutation: Mutation
}

enum Province {
  AB
  BC
  MB
  NB
  NL
  NT
  NS
  NU
  ON
  PE
  QC
  SK
  YT
}
